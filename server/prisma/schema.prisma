generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   // 'tenant' | 'homeowner' | 'admin'
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings      Booking[]
  ownedVillas   Villa[]    @relation("HomeownerVillas")
  messages_sent Message[]  @relation("MessageSender")
  messages_received Message[] @relation("MessageReceiver")
  notifications Notification[]
}

model Villa {
  id                 String   @id @default(cuid())
  name               String
  ownerId            String
  description        String
  images             String   // JSON array stored as string
  location           String
  amenities          String   // JSON object stored as string
  maxVisitors        Int
  numberOfBedrooms   Int
  numberOfBeds       Int
  numberOfBathrooms  Int
  weekdayPrice       Float
  weekendPrice       Float
  halfDayPrice       Float
  customPricing      String?  // JSON array stored as string
  houseRules         String   // JSON object stored as string
  isActive           Boolean  @default(true)
  isFeatured         Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  owner      User      @relation("HomeownerVillas", fields: [ownerId], references: [id])
  bookings   Booking[]
}

model Booking {
  id             String   @id @default(cuid())
  villaId        String
  tenantId       String
  checkInDate    DateTime
  checkOutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  status         String   // 'pending' | 'confirmed' | 'cancelled' | 'completed'
  paymentStatus  String   // 'pending' | 'paid' | 'refunded'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  villa  Villa @relation(fields: [villaId], references: [id])
  tenant User  @relation(fields: [tenantId], references: [id])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime @default(now())
  isRead     Boolean  @default(false)

  sender   User @relation("MessageSender", fields: [senderId], references: [id])
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   // 'booking' | 'payment' | 'message' | 'system'
  timestamp DateTime @default(now())
  isRead    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

model Promotion {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  link        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}